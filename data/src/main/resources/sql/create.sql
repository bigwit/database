DROP TABLE CLIENTS CASCADE CONSTRAINTS ;

DROP TABLE COMMENTS CASCADE CONSTRAINTS ;

DROP TABLE CONTACTS CASCADE CONSTRAINTS ;

DROP TABLE CURRENCY CASCADE CONSTRAINTS ;

DROP TABLE EMPLOYEES CASCADE CONSTRAINTS ;

DROP TABLE FLIGHTS CASCADE CONSTRAINTS ;

DROP TABLE FOOD CASCADE CONSTRAINTS ;

DROP TABLE HOTELS CASCADE CONSTRAINTS ;

DROP TABLE LOCATIONS CASCADE CONSTRAINTS ;

DROP TABLE OFFICES CASCADE CONSTRAINTS ;

DROP TABLE PEOPLES CASCADE CONSTRAINTS ;

DROP TABLE PHOTO CASCADE CONSTRAINTS ;

DROP TABLE PLACEMENT CASCADE CONSTRAINTS ;

DROP TABLE PLACES CASCADE CONSTRAINTS ;

DROP TABLE ROOMS CASCADE CONSTRAINTS ;

DROP TABLE TRAVELS CASCADE CONSTRAINTS ;

DROP TABLE TOURS CASCADE CONSTRAINTS ;

DROP SEQUENCE CLIENTS_ID_SEQ;

DROP SEQUENCE COMMENTS_ID_SEQ;

DROP SEQUENCE CONTACTS_ID_SEQ;

DROP SEQUENCE CURRENCY_ID_SEQ;

DROP SEQUENCE EMPLOYEES_ID_SEQ;

DROP SEQUENCE FLIGHTS_ID_SEQ;

DROP SEQUENCE FOOD_ID_SEQ;

DROP SEQUENCE HOTELS_ID_SEQ;

DROP SEQUENCE LOCATIONS_ID_SEQ;

DROP SEQUENCE OFFICES_ID_SEQ;

DROP SEQUENCE PEOPLES_ID_SEQ;

DROP SEQUENCE PHOTO_ID_SEQ;

DROP SEQUENCE PLACEMENT_ID_SEQ;

DROP SEQUENCE PLACES_ID_SEQ;

DROP SEQUENCE ROOMS_ID_SEQ;

DROP SEQUENCE TRAVELS_ID_SEQ;

DROP SEQUENCE TOURS_ID_SEQ;

-- *********************************************************

CREATE TABLE CLIENTS
  (
    ID                INTEGER NOT NULL ,
    SERIAL_PASSPORT   INTEGER NOT NULL CHECK ( SERIAL_PASSPORT > 0 ) ,
    NUMBER_PASSPORT   INTEGER NOT NULL CHECK ( NUMBER_PASSPORT > 0 ) ,
    NUMBER_VISA       INTEGER CHECK ( NUMBER_VISA > 0 ) ,
    ISSUE_DATA_VISA   DATE ,
    PERIOD_VALID_VISA DATE ,
    ID_EMPLOYEE       INTEGER NOT NULL ,
    ID_PEOPLE         INTEGER NOT NULL ,
    CONSTRAINT CLIENTS_PK PRIMARY KEY ( ID ) ,
    CHECK ( ISSUE_DATA_VISA < PERIOD_VALID_VISA ),
    CONSTRAINT CLIENT_UNIQUE_PEOPLE_ID UNIQUE ( ID_PEOPLE ) 
  ) ;

COMMENT ON COLUMN CLIENTS.ID 			IS 'Уникальный номер клиента';
COMMENT ON COLUMN CLIENTS.SERIAL_PASSPORT 	IS 'Серия паспорта';
COMMENT ON COLUMN CLIENTS.NUMBER_PASSPORT 	IS 'Номер паспорта';
COMMENT ON COLUMN CLIENTS.NUMBER_VISA 		IS 'Номер визы';
COMMENT ON COLUMN CLIENTS.ISSUE_DATA_VISA 	IS 'Дата получения визы';
COMMENT ON COLUMN CLIENTS.PERIOD_VALID_VISA 	IS 'Период действия визы';
COMMENT ON COLUMN CLIENTS.ID_EMPLOYEE 		IS 'Уникальный номер сотрудника';
COMMENT ON COLUMN CLIENTS.ID_PEOPLE 		IS 'Уникальный номер человека';

-- *********************************************************

CREATE TABLE COMMENTS
  (
    ID           INTEGER NOT NULL ,
    TEXT_COMMENT VARCHAR2 (300) NOT NULL CHECK ( NOT REGEXP_LIKE(TEXT_COMMENT, '^\s+$') ) ,
    ID_HOTEL     INTEGER ,
    ID_CLIENT    INTEGER NOT NULL ,
    ID_PLACE     INTEGER ,
    ID_OFFICE    INTEGER ,
    CONSTRAINT COMMENTS_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN COMMENTS.ID 			IS 'Уникальный номер комментария';
COMMENT ON COLUMN COMMENTS.TEXT_COMMENT 	IS 'Текст комментария';
COMMENT ON COLUMN COMMENTS.ID_HOTEL 		IS 'Уникальный номер отеля';
COMMENT ON COLUMN COMMENTS.ID_CLIENT 		IS 'Уникальный номер клиента';
COMMENT ON COLUMN COMMENTS.ID_PLACE 		IS 'Уникальный номер места';
COMMENT ON COLUMN COMMENTS.ID_OFFICE 		IS 'Уникальный номер офиса';

-- *********************************************************

CREATE TABLE CONTACTS
  (
    ID          INTEGER NOT NULL ,
    PHONE       VARCHAR2 (30) NOT NULL CHECK ( NOT REGEXP_LIKE (PHONE, '^\s+$') ),
    EMAIL       VARCHAR2 (50) CHECK ( NOT REGEXP_LIKE (EMAIL, '^\s+$') ),
    ID_LOCATION INTEGER NOT NULL,
    CONSTRAINT CONTACTS_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN CONTACTS.ID 			IS 'Уникальный номер контакта';
COMMENT ON COLUMN CONTACTS.PHONE 		IS 'Номер телефона';
COMMENT ON COLUMN CONTACTS.EMAIL 		IS 'Адрес электронной почты';
COMMENT ON COLUMN CONTACTS.ID_LOCATION 		IS 'Уникальный номер локации';

-- *********************************************************

CREATE TABLE CURRENCY
  (
    ID          INTEGER NOT NULL ,
    DESCRIPTION VARCHAR2 (3 BYTE) NOT NULL CHECK ( NOT REGEXP_LIKE (DESCRIPTION, '^\s+$') ), 
    RATE 	FLOAT NOT NULL CHECK ( RATE > 0 ),
    CONSTRAINT CURRENCY_PK PRIMARY KEY ( ID ) 
  ) ;

COMMENT ON COLUMN CURRENCY.ID 			IS 'Уникальный номер валюты';
COMMENT ON COLUMN CURRENCY.DESCRIPTION 		IS 'Наименование кода валюты';
COMMENT ON COLUMN CURRENCY.RATE 		IS 'Курс валюты по отношению к рублю';

-- *********************************************************

CREATE TABLE EMPLOYEES
  (
    ID          INTEGER NOT NULL ,
    POSITION    VARCHAR2 (20) NOT NULL CHECK ( NOT REGEXP_LIKE (POSITION, '^\s+$') ),
    SALARY      FLOAT NOT NULL ,
    BONUS       INTEGER ,
    STATUS      VARCHAR2 (20) NOT NULL CHECK ( STATUS IN ('fired', 'leave', 'works') ),
    DESCRIPTION  VARCHAR2 (300) CHECK ( NOT REGEXP_LIKE (DESCRIPTION, '^\s+$') ),
    ID_OFFICE   INTEGER NOT NULL ,
    ID_PEOPLE   INTEGER NOT NULL ,
    ID_CURRENCY INTEGER NOT NULL,
    CONSTRAINT EMPLOYEES_PK PRIMARY KEY ( ID ),
    CHECK ( NOT REGEXP_LIKE (STATUS, '^\s+$') ),
    CONSTRAINT EMPLOYEE_UNIQUE_PEOPLE_ID UNIQUE ( ID_PEOPLE )
  ) ;

COMMENT ON COLUMN EMPLOYEES.ID 			IS 'Уникальный номер сотрудника';
COMMENT ON COLUMN EMPLOYEES.POSITION 		IS 'Должность';
COMMENT ON COLUMN EMPLOYEES.SALARY 		IS 'Заработная плата';
COMMENT ON COLUMN EMPLOYEES.BONUS 		IS 'Премия';
COMMENT ON COLUMN EMPLOYEES.STATUS 		IS 'Статус';
COMMENT ON COLUMN EMPLOYEES.DESCRIPTION 	IS 'Другое';
COMMENT ON COLUMN EMPLOYEES.ID_OFFICE 		IS 'Уникальный номер офиса';
COMMENT ON COLUMN EMPLOYEES.ID_PEOPLE 		IS 'Уникальный номер человека';

-- *********************************************************

CREATE TABLE FLIGHTS
  (
    ID               INTEGER NOT NULL ,
    LEAVING_DATE     DATE NOT NULL ,
    ARRIVAL_DATE     DATE NOT NULL ,
    TYPE_TRANSPORT   VARCHAR2 (30) NOT NULL CHECK ( NOT REGEXP_LIKE (TYPE_TRANSPORT, '^\s+$') ),
    PRICE            FLOAT NOT NULL CHECK ( PRICE >= 0 ),
    ID_TOUR      INTEGER NOT NULL ,
    ID_LOCATION_TO   INTEGER NOT NULL ,
    ID_LOCATION_FROM INTEGER NOT NULL ,
    ID_CURRENCY      INTEGER NOT NULL ,
    CONSTRAINT FLIGHTS_PK PRIMARY KEY ( ID ),
    CHECK ( LEAVING_DATE <= ARRIVAL_DATE ),
    CHECK ( ID_LOCATION_FROM <> ID_LOCATION_TO )
  ) ;

COMMENT ON COLUMN FLIGHTS.ID 			IS 'Уникальный номер поездки';
COMMENT ON COLUMN FLIGHTS.LEAVING_DATE 		IS 'Дата отправки';
COMMENT ON COLUMN FLIGHTS.ARRIVAL_DATE 		IS 'Дата прибытия';
COMMENT ON COLUMN FLIGHTS.TYPE_TRANSPORT 	IS 'Тип транспорта';
COMMENT ON COLUMN FLIGHTS.PRICE 		IS 'Цена поездки';
COMMENT ON COLUMN FLIGHTS.ID_TOUR 		IS 'Уникальный номер тура';
COMMENT ON COLUMN FLIGHTS.ID_LOCATION_TO 	IS 'Уникальный номер места назначения';
COMMENT ON COLUMN FLIGHTS.ID_LOCATION_FROM 	IS 'Уникальный номер места отправки';
COMMENT ON COLUMN FLIGHTS.ID_CURRENCY 		IS 'Уникальный номер валюты';

-- *********************************************************

CREATE TABLE FOOD
  (
    ID          INTEGER NOT NULL ,
    TYPE        VARCHAR2 (20 BYTE) NOT NULL ,
    PRICE       FLOAT NOT NULL ,
    ID_CURRENCY INTEGER NOT NULL ,
    CONSTRAINT FOOD_PK PRIMARY KEY ( ID ) ,
    CHECK ( PRICE > 0 ) ,
    CHECK ( NOT REGEXP_LIKE (TYPE, '^\s+$') )
  ) ;

COMMENT ON COLUMN FOOD.ID 			IS 'Уникальный номер типа питания';
COMMENT ON COLUMN FOOD.TYPE 			IS 'Тип питания';
COMMENT ON COLUMN FOOD.PRICE 			IS 'Цена типа питания';
COMMENT ON COLUMN FOOD.ID_CURRENCY 		IS 'Уникальный номер валюты';

-- *********************************************************

CREATE TABLE HOTELS
  (
    ID           INTEGER NOT NULL ,
    RATING_HOTEL VARCHAR2 (1 BYTE) NOT NULL CHECK ( RATING_HOTEL IN ('1', '2', '3', '4', '5') ) ,
    ARRIVAL_DATE DATE NOT NULL ,
    LEAVING_DATE DATE NOT NULL ,
    DESCRIPTION  VARCHAR2 (200 BYTE) CHECK ( NOT REGEXP_LIKE (DESCRIPTION, '^\s+$') ),
    ID_TOUR    INTEGER NOT NULL,
    ID_LOCATION  INTEGER NOT NULL,
    CONSTRAINT HOTELS_PK PRIMARY KEY ( ID ),
    CHECK ( ARRIVAL_DATE < LEAVING_DATE )
  ) ;

COMMENT ON COLUMN HOTELS.ID 			IS 'Уникальный номер отеля';
COMMENT ON COLUMN HOTELS.RATING_HOTEL 		IS 'Рейтинг отеля';
COMMENT ON COLUMN HOTELS.ARRIVAL_DATE 		IS 'Дата прибытия';
COMMENT ON COLUMN HOTELS.LEAVING_DATE 		IS 'Дата выселения';
COMMENT ON COLUMN HOTELS.DESCRIPTION 		IS 'Описание отеля';
COMMENT ON COLUMN HOTELS.ID_TOUR 		IS 'Уникальный номер путевки';
COMMENT ON COLUMN HOTELS.ID_LOCATION 		IS 'Уникальный номер локации';

-- *********************************************************

CREATE TABLE LOCATIONS
  (
    ID          INTEGER NOT NULL ,
    COUNTRY     VARCHAR2 (30) NOT NULL CHECK ( NOT REGEXP_LIKE (COUNTRY, '^\s+$') ),
    CITY        VARCHAR2 (30) NOT NULL CHECK ( NOT REGEXP_LIKE (CITY, '^\s+$') ),
    DESCRIPTION VARCHAR2 (300) NOT NULL CHECK ( NOT REGEXP_LIKE (DESCRIPTION, '^\s+$') ),
    CONSTRAINT LOCATIONS_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN LOCATIONS.ID 			IS 'Уникальный номер локации';
COMMENT ON COLUMN LOCATIONS.COUNTRY 		IS 'Страна';
COMMENT ON COLUMN LOCATIONS.CITY 		IS 'Город';
COMMENT ON COLUMN LOCATIONS.DESCRIPTION 	IS 'Адрес';

-- *********************************************************

CREATE TABLE OFFICES
  (
    ID         INTEGER NOT NULL ,
    NAME       VARCHAR2 (30 BYTE) NOT NULL CHECK ( NOT REGEXP_LIKE (NAME, '^\s+$') ),
    ID_CONTACT INTEGER NOT NULL,
    CONSTRAINT OFFICES_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN OFFICES.ID 			IS 'Уникальный номер офиса';
COMMENT ON COLUMN OFFICES.NAME 			IS 'Название офиса';
COMMENT ON COLUMN OFFICES.ID_CONTACT 		IS 'Уникальный номер контакта';

-- *********************************************************

CREATE TABLE PEOPLES
  (
    ID          INTEGER NOT NULL ,
    FIRST_NAME  VARCHAR2 (30) NOT NULL CHECK ( NOT REGEXP_LIKE (FIRST_NAME, '^\s$') ),
    MIDDLE_NAME VARCHAR2 (30) CHECK ( NOT REGEXP_LIKE (MIDDLE_NAME, '^\s$') ),
    LAST_NAME   VARCHAR2 (30) NOT NULL CHECK ( NOT REGEXP_LIKE (LAST_NAME, '^\s$') ),
    DATE_BIRTH  DATE NOT NULL ,
    SEX         VARCHAR2 (1) NOT NULL CHECK ( SEX IN ('F', 'M') ),
    ID_CONTACT  INTEGER NOT NULL,
    CONSTRAINT PEOPLES_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN PEOPLES.ID 			IS 'Уникальный номер человека';
COMMENT ON COLUMN PEOPLES.FIRST_NAME 		IS 'Имя';
COMMENT ON COLUMN PEOPLES.MIDDLE_NAME 		IS 'Отчество';
COMMENT ON COLUMN PEOPLES.LAST_NAME 		IS 'Фамилия';
COMMENT ON COLUMN PEOPLES.DATE_BIRTH 		IS 'Дата рождения';
COMMENT ON COLUMN PEOPLES.SEX 			IS 'Пол';
COMMENT ON COLUMN PEOPLES.ID_CONTACT 		IS 'Уникальный номер контакта';

-- *********************************************************

CREATE TABLE PHOTO
  (
    ID INTEGER NOT NULL ,
    PHOTO BFILE NOT NULL ,
    TEXT      VARCHAR2 (200) CHECK ( NOT REGEXP_LIKE (TEXT, '^\s$') ),
    ID_PEOPLE INTEGER ,
    ID_HOTEL  INTEGER ,
    ID_PLACE  INTEGER,
    CONSTRAINT PHOTO_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN PHOTO.ID 			IS 'Уникальный номер фотографии';
COMMENT ON COLUMN PHOTO.PHOTO 			IS 'Фотография';
COMMENT ON COLUMN PHOTO.TEXT 			IS 'Описание';
COMMENT ON COLUMN PHOTO.ID_PEOPLE 		IS 'Уникальный номер человека';
COMMENT ON COLUMN PHOTO.ID_HOTEL 		IS 'Уникальный номер отеля';
COMMENT ON COLUMN PHOTO.ID_PLACE 		IS 'Уникальный номер места';

-- *********************************************************

CREATE TABLE PLACEMENT
  (
    ID          INTEGER NOT NULL ,
    DESCRIPTION VARCHAR2 (300 BYTE) NOT NULL CHECK ( NOT REGEXP_LIKE (DESCRIPTION, '^\s$') ),
    PRICE       FLOAT NOT NULL CHECK ( PRICE > 0 ),
    ID_CURRENCY INTEGER NOT NULL,
    CONSTRAINT PLACEMENT_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN PLACEMENT.ID 			IS 'Уникальный номер типа размещения';
COMMENT ON COLUMN PLACEMENT.DESCRIPTION 	IS 'Описание типа размещения';
COMMENT ON COLUMN PLACEMENT.PRICE 		IS 'Цена';
COMMENT ON COLUMN PLACEMENT.ID_CURRENCY 	IS 'Уникальный номер валюты';

-- *********************************************************

CREATE TABLE PLACES
  (
    ID          INTEGER NOT NULL ,
    NAME        VARCHAR2 (50 BYTE) NOT NULL CHECK ( NOT REGEXP_LIKE (NAME, '^\s$') ),
    DESCRIPTION VARCHAR2 (200 BYTE) CHECK ( NOT REGEXP_LIKE (DESCRIPTION, '^\s$') ),
    ID_LOCATION INTEGER NOT NULL,
    ID_PLACE    INTEGER,
    CONSTRAINT PLACES_PK PRIMARY KEY ( ID ),
    CHECK ( ID <> ID_PLACE )
  ) ;

COMMENT ON COLUMN PLACES.ID 			IS 'Уникальный номер места';
COMMENT ON COLUMN PLACES.NAME 			IS 'Название места';
COMMENT ON COLUMN PLACES.DESCRIPTION 		IS 'Описание места';
COMMENT ON COLUMN PLACES.ID_LOCATION 		IS 'Уникальный номер локации';
COMMENT ON COLUMN PLACES.ID_PLACE 		IS 'Уникальный номер места';

-- *********************************************************

CREATE TABLE ROOMS
  (
    ID           INTEGER NOT NULL ,
    ID_HOTEL     INTEGER NOT NULL ,
    ID_FOOD      INTEGER NOT NULL ,
    ID_PLACEMENT INTEGER NOT NULL ,
    CONSTRAINT ROOMS_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN ROOMS.ID 			IS 'Уникальный номер комнаты';
COMMENT ON COLUMN ROOMS.ID_HOTEL 		IS 'Уникальный номер отеля';
COMMENT ON COLUMN ROOMS.ID_FOOD 		IS 'Уникальный номер типа питания';
COMMENT ON COLUMN ROOMS.ID_PLACEMENT 		IS 'Уникальный номер типа размещения';

-- *********************************************************

CREATE TABLE TRAVELS
  (
    ID            INTEGER NOT NULL ,
    DATE_PAYMENT  DATE NOT NULL ,
    NUMBER_ADULTS INTEGER NOT NULL CHECK ( NUMBER_ADULTS > 0 ),
    NUMBER_CHILD  INTEGER NOT NULL CHECK ( NUMBER_CHILD >= 0 ),
    ID_CLIENT     INTEGER NOT NULL ,
    ID_TOUR INTEGER NOT NULL,
    CONSTRAINT TRAVELS_PK PRIMARY KEY ( ID )
  ) ;

COMMENT ON COLUMN TRAVELS.ID 			IS 'Уникальный номер путевки';
COMMENT ON COLUMN TRAVELS.DATE_PAYMENT 		IS 'Дата оплаты';
COMMENT ON COLUMN TRAVELS.NUMBER_ADULTS 	IS 'Количество взрослых';
COMMENT ON COLUMN TRAVELS.NUMBER_CHILD 		IS 'Количество детей';
COMMENT ON COLUMN TRAVELS.ID_CLIENT 		IS 'Уникальный номер клиента';
COMMENT ON COLUMN TRAVELS.ID_TOUR 		IS 'Уникальный номер тура';

-- *********************************************************

CREATE TABLE TOURS
(
	ID INTEGER NOT NULL ,
	NAME VARCHAR2 (100 BYTE) NOT NULL CHECK ( NOT REGEXP_LIKE (NAME, '^\s$') ),
	ID_OFFICE INTEGER NOT NULL ,
	ID_PLACE INTEGER NOT NULL ,
        CONSTRAINT TOURS_PK PRIMARY KEY ( ID )
);

COMMENT ON COLUMN TOURS.ID 			IS 'Уникальный номер тура';
COMMENT ON COLUMN TOURS.NAME 			IS 'Название тура';
COMMENT ON COLUMN TOURS.ID_OFFICE 		IS 'Уникальный номер офиса';
COMMENT ON COLUMN TOURS.ID_PLACE 		IS 'Уникальный номер места';

-- *********************************************************

ALTER TABLE CLIENTS ADD CONSTRAINT CLIENTS_EMPLOYEES_FK FOREIGN KEY ( ID_EMPLOYEE ) REFERENCES EMPLOYEES ( ID ) ON DELETE CASCADE ;

ALTER TABLE CLIENTS ADD CONSTRAINT CLIENTS_PEOPLES_FK FOREIGN KEY ( ID_PEOPLE ) REFERENCES PEOPLES ( ID ) ON DELETE CASCADE ;

ALTER TABLE COMMENTS ADD CONSTRAINT COMMENTS_CLIENTS_FK FOREIGN KEY ( ID_CLIENT ) REFERENCES CLIENTS ( ID ) ON DELETE CASCADE ;

ALTER TABLE COMMENTS ADD CONSTRAINT COMMENTS_HOTELS_FK FOREIGN KEY ( ID_HOTEL ) REFERENCES HOTELS ( ID ) ON DELETE CASCADE ;

ALTER TABLE COMMENTS ADD CONSTRAINT COMMENTS_OFFICES_FK FOREIGN KEY ( ID_OFFICE ) REFERENCES OFFICES ( ID ) ON DELETE CASCADE ;

ALTER TABLE COMMENTS ADD CONSTRAINT COMMENTS_PLACES_FK FOREIGN KEY ( ID_PLACE ) REFERENCES PLACES ( ID ) ON DELETE CASCADE ;

ALTER TABLE CONTACTS ADD CONSTRAINT CONTACTS_LOCATIONS_FK FOREIGN KEY ( ID_LOCATION ) REFERENCES LOCATIONS ( ID ) ON DELETE CASCADE ;

ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_CURRENCY_FK FOREIGN KEY ( ID_CURRENCY ) REFERENCES CURRENCY ( ID ) ON DELETE CASCADE ;

ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_OFFICES_FK FOREIGN KEY ( ID_OFFICE ) REFERENCES OFFICES ( ID ) ON DELETE CASCADE ;

ALTER TABLE EMPLOYEES ADD CONSTRAINT EMPLOYEES_PEOPLES_FK FOREIGN KEY ( ID_PEOPLE ) REFERENCES PEOPLES ( ID ) ON DELETE CASCADE ;

ALTER TABLE FLIGHTS ADD CONSTRAINT FLIGHTS_CURRENCY_FK FOREIGN KEY ( ID_CURRENCY ) REFERENCES CURRENCY ( ID ) ON DELETE CASCADE ;

ALTER TABLE FLIGHTS ADD CONSTRAINT FLIGHTS_LOCATIONS_FK FOREIGN KEY ( ID_LOCATION_FROM ) REFERENCES LOCATIONS ( ID ) ON DELETE CASCADE ;

ALTER TABLE FLIGHTS ADD CONSTRAINT FLIGHTS_LOCATIONS_FKv1 FOREIGN KEY ( ID_LOCATION_TO ) REFERENCES LOCATIONS ( ID ) ON DELETE CASCADE ;

ALTER TABLE FLIGHTS ADD CONSTRAINT FLIGHTS_TOUR_FK FOREIGN KEY ( ID_TOUR ) REFERENCES TOURS ( ID ) ON DELETE CASCADE ;

ALTER TABLE FOOD ADD CONSTRAINT FOOD_CURRENCY_FK FOREIGN KEY ( ID_CURRENCY ) REFERENCES CURRENCY ( ID ) ON DELETE CASCADE ;

ALTER TABLE HOTELS ADD CONSTRAINT HOTELS_LOCATIONS_FK FOREIGN KEY ( ID_LOCATION ) REFERENCES LOCATIONS ( ID ) ON DELETE CASCADE ;

ALTER TABLE HOTELS ADD CONSTRAINT HOTELS_TOUR_FK FOREIGN KEY ( ID_TOUR ) REFERENCES TOURS ( ID ) ON DELETE CASCADE ;

ALTER TABLE OFFICES ADD CONSTRAINT OFFICES_CONTACTS_FK FOREIGN KEY ( ID_CONTACT ) REFERENCES CONTACTS ( ID ) ON DELETE CASCADE ;

ALTER TABLE PEOPLES ADD CONSTRAINT PEOPLES_CONTACTS_FK FOREIGN KEY ( ID_CONTACT ) REFERENCES CONTACTS ( ID ) ON DELETE CASCADE ;

ALTER TABLE PHOTO ADD CONSTRAINT PHOTO_HOTELS_FK FOREIGN KEY ( ID_HOTEL ) REFERENCES HOTELS ( ID ) ON DELETE CASCADE ;

ALTER TABLE PHOTO ADD CONSTRAINT PHOTO_PEOPLES_FK FOREIGN KEY ( ID_PEOPLE ) REFERENCES PEOPLES ( ID ) ON DELETE CASCADE ;

ALTER TABLE PHOTO ADD CONSTRAINT PHOTO_PLACES_FK FOREIGN KEY ( ID_PLACE ) REFERENCES PLACES ( ID ) ON DELETE CASCADE ;

ALTER TABLE PLACEMENT ADD CONSTRAINT PLACEMENT_CURRENCY_FK FOREIGN KEY ( ID_CURRENCY ) REFERENCES CURRENCY ( ID ) ON DELETE CASCADE ;

ALTER TABLE PLACES ADD CONSTRAINT PLACES_LOCATIONS_FK FOREIGN KEY ( ID_LOCATION ) REFERENCES LOCATIONS ( ID ) ON DELETE CASCADE ;

ALTER TABLE PLACES ADD CONSTRAINT PLACES_PLACES_FK FOREIGN KEY ( ID_PLACE ) REFERENCES PLACES ( ID ) ON DELETE CASCADE ;

ALTER TABLE ROOMS ADD CONSTRAINT ROOMS_FOOD_FK FOREIGN KEY ( ID_FOOD ) REFERENCES FOOD ( ID ) ON DELETE CASCADE ;

ALTER TABLE ROOMS ADD CONSTRAINT ROOMS_HOTELS_FK FOREIGN KEY ( ID_HOTEL ) REFERENCES HOTELS ( ID ) ON DELETE CASCADE ;

ALTER TABLE ROOMS ADD CONSTRAINT ROOMS_PLACEMENT_FK FOREIGN KEY ( ID_PLACEMENT ) REFERENCES PLACEMENT ( ID ) ON DELETE CASCADE ;

ALTER TABLE TRAVELS ADD CONSTRAINT TRAVELS_CLIENTS_FK FOREIGN KEY ( ID_CLIENT ) REFERENCES CLIENTS ( ID ) ON DELETE CASCADE ;

ALTER TABLE TRAVELS ADD CONSTRAINT TRAVEL_TOUR_FK FOREIGN KEY ( ID_TOUR ) REFERENCES TOURS ( ID ) ON DELETE CASCADE ;

ALTER TABLE TOURS ADD CONSTRAINT TOUR_OFFICE_FK FOREIGN KEY ( ID_OFFICE ) REFERENCES OFFICES ( ID ) ON DELETE CASCADE;

ALTER TABLE TOURS ADD CONSTRAINT TOUR_PLACE_FK FOREIGN KEY ( ID_PLACE ) REFERENCES PLACES ( ID ) ON DELETE CASCADE;

CREATE SEQUENCE CLIENTS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE 
TRIGGER CLIENTS_ID_TRG BEFORE
  INSERT ON CLIENTS FOR EACH ROW BEGIN
  SELECT CLIENTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE COMMENTS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER COMMENTS_ID_TRG BEFORE
  INSERT ON COMMENTS FOR EACH ROW BEGIN
    SELECT COMMENTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE CONTACTS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER CONTACTS_ID_TRG BEFORE
  INSERT ON CONTACTS FOR EACH ROW BEGIN
    SELECT CONTACTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE CURRENCY_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE 
TRIGGER CURRENCY_ID_TRG BEFORE
  INSERT ON CURRENCY FOR EACH ROW BEGIN
    SELECT CURRENCY_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE EMPLOYEES_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER EMPLOYEES_ID_TRG BEFORE
  INSERT OR UPDATE ON EMPLOYEES FOR EACH ROW BEGIN
    SELECT EMPLOYEES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE FLIGHTS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER FLIGHTS_ID_TRG BEFORE
  INSERT ON FLIGHTS FOR EACH ROW BEGIN
    SELECT FLIGHTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE FOOD_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE 
TRIGGER FOOD_ID_TRG BEFORE
  INSERT ON FOOD FOR EACH ROW BEGIN
    SELECT FOOD_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE HOTELS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER HOTELS_ID_TRG BEFORE
  INSERT ON HOTELS FOR EACH ROW BEGIN
    SELECT HOTELS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE LOCATIONS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER LOCATIONS_ID_TRG BEFORE
  INSERT ON LOCATIONS FOR EACH ROW BEGIN
    SELECT LOCATIONS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE OFFICES_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER OFFICES_ID_TRG BEFORE
  INSERT ON OFFICES FOR EACH ROW BEGIN
    SELECT OFFICES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE PEOPLES_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER PEOPLES_ID_TRG BEFORE
  INSERT ON PEOPLES FOR EACH ROW BEGIN
    SELECT PEOPLES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE PHOTO_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER PHOTO_ID_TRG BEFORE
  INSERT ON PHOTO FOR EACH ROW BEGIN
    SELECT PHOTO_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE PLACEMENT_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER PLACEMENT_ID_TRG BEFORE
  INSERT ON PLACEMENT FOR EACH ROW BEGIN
    SELECT PLACEMENT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE PLACES_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER PLACES_ID_TRG BEFORE
  INSERT ON PLACES FOR EACH ROW
DECLARE
  ERR_PLACE EXCEPTION;
  IDENT INTEGER;
BEGIN
  SELECT PLACES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  SELECT COUNT(*) INTO IDENT FROM PLACES WHERE :NEW.ID = ID_PLACE AND :NEW.ID_PLACE = ID;
  IF IDENT > 0 THEN 
    RAISE ERR_PLACE;
  END IF;
EXCEPTION
  WHEN ERR_PLACE THEN RAISE_APPLICATION_ERROR(-20001, 'Неверно заданы идентификаторы, нарушается целостность данных');
END;
/

CREATE SEQUENCE ROOMS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER ROOMS_ID_TRG BEFORE
  INSERT ON ROOMS FOR EACH ROW BEGIN
    SELECT ROOMS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE TRAVELS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE
TRIGGER TRAVELS_ID_TRG BEFORE
  INSERT ON TRAVELS FOR EACH ROW BEGIN
  SELECT TRAVELS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

CREATE SEQUENCE TOURS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE 
TRIGGER TOURS_ID_TRG BEFORE 
  INSERT ON TOURS FOR EACH ROW BEGIN
  SELECT TOURS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/

-- Триггеры, контролирующие целостность базы данных

CREATE OR REPLACE 
TRIGGER CLIENTS_TRIGGER BEFORE
  INSERT OR UPDATE ON CLIENTS FOR EACH ROW
  DECLARE
    EXIST_EMPLOYEE EXCEPTION;
    IDENT INTEGER;
  BEGIN
  -- проверка на существование человека с таким же ID_PEOPLE
  SELECT COUNT(*) INTO IDENT FROM EMPLOYEES WHERE :NEW.ID_PEOPLE = ID_PEOPLE;
  IF IDENT <> 0
    THEN RAISE EXIST_EMPLOYEE;
  END IF;
  EXCEPTION
    WHEN EXIST_EMPLOYEE THEN RAISE_APPLICATION_ERROR(-20000, 'Сотрудник с таким ID_PEOPLE уже существует');
END;
/

CREATE OR REPLACE
TRIGGER COMMENTS_TRIGGER BEFORE
  INSERT OR UPDATE ON COMMENTS FOR EACH ROW
  DECLARE
    NOT_EXIST_TARGET EXCEPTION;
    TOO_MANY_TARGETS EXCEPTION;
  BEGIN
    -- указан ли объект, кому предназначается комментарий
    IF :NEW.ID_HOTEL IS NULL
      AND :NEW.ID_PLACE IS NULL
      AND :NEW.ID_OFFICE IS NULL
      THEN RAISE NOT_EXIST_TARGET;
    END IF;

    -- указан ли только один объект
    IF :NEW.ID_HOTEL IS NOT NULL AND :NEW.ID_PLACE IS NOT NULL
      OR :NEW.ID_PLACE IS NOT NULL AND :NEW.ID_OFFICE IS NOT NULL
      OR :NEW.ID_HOTEL IS NOT NULL AND :NEW.ID_OFFICE IS NOT NULL
      THEN RAISE TOO_MANY_TARGETS;
    END IF;
  EXCEPTION
    WHEN NOT_EXIST_TARGET THEN RAISE_APPLICATION_ERROR(-20000, 'Не указан ID объекта, кому предназначается комментарий');
    WHEN TOO_MANY_TARGETS THEN RAISE_APPLICATION_ERROR(-20000, 'Можно присвоить комментарий только одному из объектов');
END;
/

CREATE OR REPLACE 
TRIGGER CURRENCY_TRIGGER BEFORE
  INSERT OR UPDATE ON CURRENCY FOR EACH ROW
  DECLARE
    NULL_VAL EXCEPTION;
    DESC_EXIST EXCEPTION;
    VAL INTEGER;
  BEGIN
    :NEW.DESCRIPTION := UPPER(:NEW.DESCRIPTION);
    -- проверка на существование кода валюты
    SELECT COUNT(*) INTO VAL FROM CURRENCY WHERE DESCRIPTION = :NEW.DESCRIPTION;
    IF VAL > 0
      THEN RAISE DESC_EXIST;
    END IF;
  EXCEPTION
    WHEN DESC_EXIST THEN RAISE_APPLICATION_ERROR(-20002, 'Указанный код валюты уже существует');
END;
/

CREATE OR REPLACE
TRIGGER EMPLOYEES_TRIGGER BEFORE
  INSERT OR UPDATE ON EMPLOYEES FOR EACH ROW
  DECLARE
    EXIST_CLIENT EXCEPTION;
    IDENT INTEGER;
  BEGIN
    -- проверка на существование человека с таким ID_PEOPLE
    SELECT COUNT(*) INTO IDENT FROM CLIENTS WHERE ID_PEOPLE = :NEW.ID_PEOPLE;
    IF IDENT <> 0
      THEN RAISE EXIST_CLIENT;
    END IF;
  EXCEPTION
    WHEN EXIST_CLIENT THEN RAISE_APPLICATION_ERROR(-20002, 'Клиент с таким ID_PEOPLE уже существует');
END;
/

CREATE OR REPLACE
TRIGGER PEOPLES_TRIGGER BEFORE
  INSERT OR UPDATE ON PEOPLES FOR EACH ROW 
   DECLARE
    ERR_DATE EXCEPTION;
  BEGIN
    IF :NEW.DATE_BIRTH > SYSDATE
      THEN RAISE ERR_DATE;
    END IF;
    
    :NEW.FIRST_NAME := INITCAP(:NEW.FIRST_NAME);
    :NEW.LAST_NAME := INITCAP(:NEW.LAST_NAME);
    IF :NEW.MIDDLE_NAME IS NOT NULL
    THEN
      :NEW.MIDDLE_NAME := INITCAP(:NEW.MIDDLE_NAME);
    END IF;
  EXCEPTION
    WHEN ERR_DATE THEN RAISE_APPLICATION_ERROR(-20002, 'Неверная дата рождения');
END;
/

CREATE OR REPLACE
TRIGGER PHOTO_TRIGGER BEFORE
  INSERT OR UPDATE ON PHOTO FOR EACH ROW
  DECLARE
    TOO_MANY_TARGETS EXCEPTION;
    NOT_EXIST_TARGETS EXCEPTION;
  BEGIN
    IF :NEW.ID_HOTEL IS NULL
      AND :NEW.ID_PLACE IS NULL
      AND :NEW.ID_PEOPLE IS NULL
      THEN RAISE NOT_EXIST_TARGETS;
    END IF;
    
    IF :NEW.ID_HOTEL IS NOT NULL AND :NEW.ID_PLACE IS NOT NULL
      OR :NEW.ID_HOTEL IS NOT NULL AND :NEW.ID_PEOPLE IS NOT NULL
      OR :NEW.ID_PLACE IS NOT NULL AND :NEW.ID_PEOPLE IS NOT NULL
      THEN RAISE TOO_MANY_TARGETS;
    END IF;
  EXCEPTION
    WHEN TOO_MANY_TARGETS THEN RAISE_APPLICATION_ERROR(-20005, 'Слишком много объектов');
    WHEN NOT_EXIST_TARGETS THEN RAISE_APPLICATION_ERROR(-20006, 'Не указаны объекты, которым принадлежит фото');
END;
/

CREATE OR REPLACE 
TRIGGER TOURS_TRIGGER BEFORE
  INSERT OR UPDATE ON TOURS FOR EACH ROW
  DECLARE
    ID_LOCATION_TO INTEGER;
    ID_LOCATION_FROM INTEGER;
    ERR_LOCATION EXCEPTION;
  BEGIN
    -- проверка, что место отбытия клиента не совпадает с местом назначения
    -- получение ID локации, куда едет клиент
    SELECT LOCATIONS.ID INTO ID_LOCATION_TO FROM PLACES
    JOIN LOCATIONS ON PLACES.ID_LOCATION = LOCATIONS.ID
    WHERE PLACES.ID = :NEW.ID_PLACE;
     -- получение ID локации, откуда он отправляется
    SELECT LOCATIONS.ID INTO ID_LOCATION_FROM FROM CONTACTS
    JOIN OFFICES ON :NEW.ID_OFFICE = OFFICES.ID AND OFFICES.ID_CONTACT = CONTACTS.ID
    JOIN LOCATIONS ON LOCATIONS.ID = CONTACTS.ID_LOCATION;
    IF ID_LOCATION_TO = ID_LOCATION_FROM
      THEN RAISE ERR_LOCATION;
    END IF;
  EXCEPTION
    WHEN ERR_LOCATION THEN RAISE_APPLICATION_ERROR(-20000, 'ID локации офиса и места прибытия клиента совпадают');
END;
/

CREATE OR REPLACE TRIGGER PLACES_TRIGGER
after UPDATE ON PLACES FOR EACH ROW 
DECLARE
  ERR_PLACE EXCEPTION;
  IDENT INTEGER;
BEGIN
  --SELECT COUNT(*) INTO IDENT FROM PLACES WHERE :NEW.ID = ID_PLACE AND :NEW.ID_PLACE = ID;
 -- IF IDENT > 0 THEN 
    RAISE ERR_PLACE;
  --END IF;
EXCEPTION
  WHEN ERR_PLACE THEN RAISE_APPLICATION_ERROR(-20001, 'Неверно заданы идентификаторы, нарушается целостность данных');
END;
/

-- Функции

CREATE OR REPLACE
FUNCTION COUNT_ROOM_PRICE(ID_ROOM IN INTEGER, CURRENCY_DESC VARCHAR2)
RETURN FLOAT IS
  PRICE FLOAT := 0;
  RATE_RESULT FLOAT := 0;
BEGIN
  BEGIN
    SELECT CURRENCY.RATE INTO RATE_RESULT
    FROM CURRENCY
    WHERE DESCRIPTION = CURRENCY_DESC;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20000, 'Неизвестный тип валюты');
  END;

  SELECT (FOOD.PRICE * CUR_FOOD.RATE + PLACEMENT.PRICE * CUR_PLACEMENT.RATE)
  INTO PRICE
  FROM ROOMS
  JOIN FOOD ON FOOD.ID = ROOMS.ID_FOOD
  JOIN PLACEMENT ON PLACEMENT.ID = ROOMS.ID_PLACEMENT
  JOIN CURRENCY CUR_FOOD ON CUR_FOOD.ID = FOOD.ID_CURRENCY
  JOIN CURRENCY CUR_PLACEMENT ON CUR_PLACEMENT.ID = PLACEMENT.ID_CURRENCY
  WHERE ROOMS.ID = ID_ROOM;
  IF PRICE IS NULL THEN 
    PRICE := 0; 
  END IF;
  RETURN PRICE / RATE_RESULT;
END COUNT_ROOM_PRICE;
/

CREATE OR REPLACE
FUNCTION COUNT_TOUR_PRICE(TOUR_ID IN INTEGER, CURRENCY_DESC VARCHAR2)
RETURN FLOAT IS
  RATE_RESULT FLOAT DEFAULT 0;
  PRICE FLOAT DEFAULT 0;
  PRICE_HOTEL FLOAT DEFAULT 0;
BEGIN
  BEGIN
    SELECT RATE INTO RATE_RESULT FROM CURRENCY
    WHERE DESCRIPTION = CURRENCY_DESC;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR(-20000, 'Неизвестный тип валюты');
  END;

  SELECT SUM(RP) INTO PRICE_HOTEL FROM (
    SELECT COUNT_ROOM_PRICE(ROOMS.ID, CURRENCY_DESC) RP
    FROM ROOMS
    JOIN HOTELS ON HOTELS.ID_TOUR = TOUR_ID
    WHERE ROOMS.ID_HOTEL = HOTELS.ID);
  SELECT SUM(FP) INTO PRICE FROM (
    SELECT (FLIGHTS.PRICE * CURRENCY.RATE) FP FROM FLIGHTS
    JOIN CURRENCY ON CURRENCY.ID = FLIGHTS.ID_CURRENCY
    WHERE FLIGHTS.ID_TOUR = TOUR_ID);
  IF PRICE_HOTEL IS NULL THEN 
    PRICE_HOTEL := 0; 
  END IF;
  IF PRICE IS NULL THEN 
    PRICE := 0; 
  END IF;
  PRICE := PRICE / RATE_RESULT + PRICE_HOTEL;
  RETURN (PRICE * 1.30);
END;
/
