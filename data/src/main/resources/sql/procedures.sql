-- Добавление новой записи в таблицу USERS
CREATE OR REPLACE PROCEDURE ADD_USER(
  LOGIN VARCHAR2, 
  HASH_PASSWD VARCHAR2, 
  ROLE VARCHAR2, 
  ID_PEOPLE INTEGER,
  IDENT OUT INTEGER
) IS 
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN 
	INSERT INTO USERS(LOGIN, HASH_PASSWD, ROLE, ID_PEOPLE)
	VALUES (LOGIN, HASH_PASSWD, ROLE, ID_PEOPLE)
  RETURNING ID INTO IDENT;
  COMMIT;
EXCEPTION
	WHEN OTHERS THEN IDENT := -1;
	ROLLBACK;
END;
//

-- добавление новой записи в таблицу PEOPLES
CREATE OR REPLACE PROCEDURE ADD_PEOPLE(
	FIRST_NAME VARCHAR2,
	MIDDLE_NAME VARCHAR2,
	LAST_NAME VARCHAR2,
	DATE_BIRTH DATE,
	SEX VARCHAR2,
	ID_CONTACT INTEGER,
	IDENT OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO PEOPLES(FIRST_NAME, MIDDLE_NAME, LAST_NAME, DATE_BIRTH, SEX, ID_CONTACT)
	VALUES (FIRST_NAME, MIDDLE_NAME, LAST_NAME, DATE_BIRTH, SEX, ID_CONTACT)
	RETURNING ID INTO IDENT;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN IDENT := -1;
	ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE (
	POSITION VARCHAR2,
    SALARY      FLOAT,
    BONUS       INTEGER,
    STATUS      VARCHAR2,
    DESCRIPTION  VARCHAR2,
    ID_OFFICE   INTEGER ,
    ID_PEOPLE   INTEGER ,
    ID_CURRENCY INTEGER,
    NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO EMPLOYEES (
		POSITION, 
		SALARY, 
		BONUS, 
		STATUS, 
		DESCRIPTION, 
		ID_OFFICE, 
		ID_PEOPLE, 
		ID_CURRENCY
	) VALUES (
		POSITION, 
		SALARY, 
		BONUS, 
		STATUS, 
		DESCRIPTION, 
		ID_OFFICE, 
		ID_PEOPLE, 
		ID_CURRENCY
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_CLIENT (
	SERIAL_PASSPORT   INTEGER ,
    NUMBER_PASSPORT   INTEGER ,
    NUMBER_VISA       INTEGER ,
    ISSUE_DATA_VISA   DATE ,
    PERIOD_VALID_VISA DATE ,
    ID_EMPLOYEE       INTEGER ,
    ID_PEOPLE         INTEGER ,
    NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO CLIENTS (
		SERIAL_PASSPORT,
    	NUMBER_PASSPORT,
    	NUMBER_VISA,
    	ISSUE_DATA_VISA,
    	PERIOD_VALID_VISA,
    	ID_EMPLOYEE,
    	ID_PEOPLE
	) VALUES (
		SERIAL_PASSPORT,
    	NUMBER_PASSPORT,
    	NUMBER_VISA,
    	ISSUE_DATA_VISA,
    	PERIOD_VALID_VISA,
    	ID_EMPLOYEE,
    	ID_PEOPLE
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_COMMENT(
	TEXT_COMMENT VARCHAR2 := NULL,
    ID_HOTEL INTEGER DEFAULT NULL,
    ID_CLIENT INTEGER := NULL,
    ID_PLACE INTEGER DEFAULT NULL,
    ID_OFFICE INTEGER DEFAULT NULL,
    NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO COMMENTS (
		TEXT_COMMENT,
   		ID_HOTEL,
    	ID_CLIENT,
    	ID_PLACE,
    	ID_OFFICE
	) VALUES (
		TEXT_COMMENT,
   		ID_HOTEL,
    	ID_CLIENT,
    	ID_PLACE,
    	ID_OFFICE
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_LOCATION (
	COUNTRY VARCHAR2,
	CITY VARCHAR2,
	DESCRIPTION VARCHAR2,
	NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO LOCATIONS(COUNTRY, CITY, DESCRIPTION)
	VALUES (COUNTRY, CITY, DESCRIPTION)
	RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN NEW_ID := -1;
	ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_CONTACT(
	PHONE VARCHAR2,
	EMAIL VARCHAR2,
	ID_LOCATION INTEGER,
	IDENT OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO CONTACTS(PHONE, EMAIL, ID_LOCATION)
	VALUES (PHONE, EMAIL, ID_LOCATION)
	RETURNING ID INTO IDENT;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN IDENT := -1;
	ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_CURRENCY(
	DESCRIPTION VARCHAR2 , 
    RATE 	FLOAT ,
    NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO CURRENCY (
		DESCRIPTION,
		RATE
	) VALUES (
		DESCRIPTION,
		RATE
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_FLIGHT(
	LEAVING_DATE     DATE,
    ARRIVAL_DATE     DATE,
    TYPE_TRANSPORT   VARCHAR2,
    PRICE            FLOAT,
    ID_TOUR      INTEGER,
    ID_LOCATION_TO   INTEGER,
    ID_LOCATION_FROM INTEGER,
    ID_CURRENCY      INTEGER,
    NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO FLIGHTS (
		LEAVING_DATE,
		ARRIVAL_DATE,
		TYPE_TRANSPORT,
		PRICE,
		ID_TOUR,
		ID_LOCATION_TO,
		ID_LOCATION_FROM,
		ID_CURRENCY
	) VALUES (
		LEAVING_DATE,
		ARRIVAL_DATE,
		TYPE_TRANSPORT,
		PRICE,
		ID_TOUR,
		ID_LOCATION_TO,
		ID_LOCATION_FROM,
		ID_CURRENCY
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_FOOD(
	TYPE VARCHAR2,
	PRICE FLOAT,
	ID_CURRENCY INTEGER,
    NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO FOOD (
		TYPE,
		PRICE,
		ID_CURRENCY
	) VALUES (
		TYPE,
		PRICE,
		ID_CURRENCY
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;
//

CREATE OR REPLACE PROCEDURE ADD_PHOTO (
		PHOTO BFILE,
		ID_PEOPLE INTEGER,
		ID_HOTEL INTEGER,
		ID_PLACE INTEGER,
		NEW_ID OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	INSERT INTO PHOTO (
		PHOTO,
		ID_PEOPLE,
		ID_HOTEL,
		ID_PLACE
	) VALUES (
		PHOTO,
		ID_PEOPLE,
		ID_HOTEL,
		ID_PLACE
	) RETURNING ID INTO NEW_ID;
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		NEW_ID := -1;
		ROLLBACK;
END;

-- =====================================================================================

-- Регистрация нового пользователя
CREATE OR REPLACE PROCEDURE REGISTER_USER (
	LOGIN VARCHAR2,
	HASH_PASSWD VARCHAR2,
	FIRST_NAME VARCHAR2,
	MIDDLE_NAME VARCHAR2,
	LAST_NAME VARCHAR2,
	DATE_BIRTH DATE,
	SEX VARCHAR2,
	PHONE VARCHAR2,
	EMAIL VARCHAR2,
	COUNTRY VARCHAR2,
	CITY VARCHAR2,
	DESCRIPTION VARCHAR2,
	ID_USER OUT INTEGER
) IS
PRAGMA AUTONOMOUS_TRANSACTION;
	IDENT INTEGER;
	ERR_LOCATION EXCEPTION;
	ERR_CONTACT EXCEPTION;
	ERR_PEOPLE EXCEPTION;
  	ERR_USER EXCEPTION;
BEGIN
	ADD_LOCATION(COUNTRY, CITY, DESCRIPTION, IDENT);
	IF IDENT = -1 THEN
		RAISE ERR_LOCATION;
	END IF;
	
	ADD_CONTACT(PHONE, EMAIL, IDENT, IDENT);
	IF IDENT = -1 THEN
		RAISE ERR_CONTACT;
	END IF;
	
	ADD_PEOPLE(FIRST_NAME, MIDDLE_NAME, LAST_NAME, DATE_BIRTH, SEX, IDENT, IDENT);
	IF IDENT = -1 THEN 
		RAISE ERR_PEOPLE;
	END IF;
	
	ADD_USER(LOGIN, HASH_PASSWD, 'USER', IDENT, ID_USER);
	IF ID_USER = -1 THEN
		RAISE ERR_USER;
	END IF;
EXCEPTION
	WHEN ERR_LOCATION THEN RAISE_APPLICATION_ERROR(-20001, 'Ошибка при добавлении локации');
	WHEN ERR_CONTACT THEN RAISE_APPLICATION_ERROR(-20002, 'Ошибка при добавлении контакта');
	WHEN ERR_PEOPLE THEN RAISE_APPLICATION_ERROR(-20003, 'Ошибка при добавлении человека');
	WHEN ERR_USER THEN RAISE_APPLICATION_ERROR(-20004, 'Ошибка при добавлении пользователя');
	ROLLBACK;
END;
//