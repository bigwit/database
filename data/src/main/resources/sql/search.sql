DROP TABLE SYMBOLS;

CREATE TABLE SYMBOLS (
  ENG CHAR NOT NULL,
  RUS CHAR NOT NULL,
  
  CONSTRAINT SYMBOLS_PK PRIMARY KEY ( ENG, RUS )
);

INSERT INTO SYMBOLS (ENG, RUS) VALUES ('Q', 'Й');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('W', 'Ц');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('E', 'У');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('R', 'К');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('T', 'Е');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('Y', 'Н');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('U', 'Г');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('I', 'Ш');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('O', 'Щ');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('P', 'З');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('[', 'Х');
INSERT INTO SYMBOLS (ENG, RUS) VALUES (']', 'Ъ');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('A', 'Ф');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('S', 'Ы');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('D', 'В');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('F', 'А');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('G', 'П');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('H', 'Р');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('J', 'О');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('K', 'Л');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('L', 'Д');
INSERT INTO SYMBOLS (ENG, RUS) VALUES (';', 'Ж');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('''', 'Э');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('Z', 'Я');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('X', 'Ч');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('C', 'С');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('V', 'М');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('B', 'И');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('N', 'Т');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('M', 'Ь');
INSERT INTO SYMBOLS (ENG, RUS) VALUES (',', 'Б');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('.', 'Ю');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('/', '.');
INSERT INTO SYMBOLS (ENG, RUS) VALUES ('`', 'Ё');

CREATE OR REPLACE FUNCTION RUS_TO_ENG(S_IN IN VARCHAR2) 
RETURN VARCHAR2 IS
  S_OUT VARCHAR2(32767);
BEGIN
  S_OUT := S_IN;
  FOR SYM IN (SELECT * FROM SYMBOLS) LOOP
    S_OUT := REPLACE(S_OUT, SYM.RUS, SYM.ENG);
  END LOOP;
  
  RETURN S_OUT;
END RUS_TO_ENG;
/

CREATE OR REPLACE FUNCTION ENG_TO_RUS(S_IN IN VARCHAR2)
RETURN VARCHAR2 IS
  S_OUT VARCHAR2(32767);
BEGIN
  S_OUT := S_IN;
  FOR SYM IN (SELECT * FROM SYMBOLS) LOOP
    S_OUT := REPLACE(S_OUT, SYM.ENG, SYM.RUS);
  END LOOP;
  
  RETURN S_OUT;
END ENG_TO_RUS;
/

CREATE OR REPLACE FUNCTION LEVENSTEIN(S1 VARCHAR2, S2 VARCHAR2)
RETURN INTEGER
IS 
  TYPE INT_ARR IS TABLE OF INTEGER INDEX BY PLS_INTEGER;
  M INTEGER := LENGTH(S1);
  N INTEGER := LENGTH(S2);
  D1 INT_ARR;
  D2 INT_ARR;
  EMPTY_ARR INT_ARR;
  COST_I INTEGER;
BEGIN
  FOR I IN 0 .. N LOOP
    D2(I) := I;
  END LOOP;
  
  FOR I IN 1 .. M LOOP
    D1 := D2;
    D2 := EMPTY_ARR;
    FOR J IN 0 .. N LOOP
      IF J = 0 THEN
        D2(J) := I;
      ELSE
        IF SUBSTR(S1, I - 1, 1) <> SUBSTR(S2, J - 1, 1) THEN
          COST_I := 1;
        ELSE 
          COST_I := 0;
        END IF;
        IF D2(J - 1) < D1(J) AND D2(J - 1) < (D1(J - 1) + COST_I) THEN
          D2(J) := D2(J - 1) + 1;
        ELSIF D1(J) < (D1(J - 1) + COST_I) THEN
          D2(J) := D1(J) + 1;
        ELSE
          D2(J) := D1(J - 1) + COST_I;
        END IF;
      END IF;
    END LOOP;
  END LOOP;
  
  RETURN D2(N);
END;
/

CREATE OR REPLACE FUNCTION SEARCH_SIMPLE(STR IN VARCHAR2)
RETURN LIST_TOUR_INFO PIPELINED
IS
  S_IN VARCHAR2(32767) := '%' || STR || '%';
  S_RUS VARCHAR2(32767) := '%' || ENG_TO_RUS(STR) || '%';
  S_ENG VARCHAR2(32767) := '%' || RUS_TO_ENG(STR) || '%';
BEGIN
  FOR I IN (
      SELECT *
      FROM TABLE(FIND_TOUR_INFO()) 
      WHERE 
        NAME LIKE S_IN OR NAME LIKE S_RUS OR NAME LIKE S_ENG OR 
        TRAVEL_INFO LIKE S_IN OR TRAVEL_INFO LIKE S_RUS OR TRAVEL_INFO LIKE S_ENG OR 
        FLIGHT_INFO LIKE S_IN OR FLIGHT_INFO LIKE S_RUS OR FLIGHT_INFO LIKE S_ENG OR 
        HOTEL_INFO LIKE S_IN OR HOTEL_INFO LIKE S_RUS OR HOTEL_INFO LIKE S_ENG) LOOP
    PIPE ROW (TOUR_INFO(I.NAME, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
  END LOOP;
END;
/

--CREATE OR REPLACE FUNCTION SEARCH_LEVENSTEIN(S_IN VARCHAR2)
--RETURN LIST_TOUR_INFO PIPELINED
--IS
--  S_RUS VARCHAR2(32767) := ENG_TO_RUS(S_IN);
--  S_ENG VARCHAR2(32767) := RUS_TO_ENG(S_IN);
--BEGIN
--  FOR I IN (
--      SELECT *
--      FROM TABLE(FIND_TOUR_INFO()) 
--      WHERE 
--        ) LOOP
--    PIPE ROW (TOUR_INFO(I.NAME, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
--  END LOOP;
--END;
--/

CREATE OR REPLACE FUNCTION SEARCH(S_IN VARCHAR2, S_TYPE VARCHAR2)
RETURN LIST_TOUR_INFO PIPELINED
IS

BEGIN
  CASE S_TYPE
    WHEN 'SIMPLE' THEN 
      FOR I IN (SELECT * FROM TABLE (SEARCH_SIMPLE(S_IN))) LOOP
        PIPE ROW (TOUR_INFO(I.NAME, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
      END LOOP;
  END CASE;
END;
/