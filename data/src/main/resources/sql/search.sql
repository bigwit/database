DROP FUNCTION RUS_TO_ENG;
//

DROP FUNCTION ENG_TO_RUS;
//

DROP TABLE SYMBOLS;
//

DROP FUNCTION FIND_TOUR_INFO;
//

DROP FUNCTION SEARCH;
//

DROP FUNCTION SEARCH_SIMPLE;
//

DROP FUNCTION SEARCH_LEVENSTEIN;
//

DROP TYPE LIST_TOUR_INFO;
//

CREATE OR REPLACE TYPE TOUR_INFO AS OBJECT (
	NAME VARCHAR2(100),
	NAME_PLACE VARCHAR2(50),
	TRAVEL_INFO VARCHAR2(32767),
	FLIGHT_INFO VARCHAR2(32767),
	HOTEL_INFO VARCHAR2(32767)
);
//

CREATE OR REPLACE TYPE LIST_TOUR_INFO IS TABLE OF TOUR_INFO;
//

CREATE TABLE SYMBOLS (
  ENG CHAR NOT NULL,
  RUS CHAR NOT NULL,
  
  CONSTRAINT SYMBOLS_PK PRIMARY KEY ( ENG, RUS )
);
//

create or replace 
FUNCTION RUS_TO_ENG(S_IN IN VARCHAR2) 
RETURN VARCHAR2 IS
  S_OUT VARCHAR2(32767);
BEGIN
  S_OUT := UPPER(S_IN);
  FOR SYM IN (SELECT * FROM SYMBOLS) LOOP
    S_OUT := REPLACE(S_OUT, SYM.RUS, SYM.ENG);
  END LOOP;
  
  RETURN S_OUT;
END RUS_TO_ENG;
//

create or replace 
FUNCTION ENG_TO_RUS(S_IN IN VARCHAR2)
RETURN VARCHAR2 IS
  S_OUT VARCHAR2(32767);
BEGIN
  S_OUT := UPPER(S_IN);
  FOR SYM IN (SELECT * FROM SYMBOLS) LOOP
    S_OUT := REPLACE(S_OUT, SYM.ENG, SYM.RUS);
  END LOOP;
  
  RETURN S_OUT;
END ENG_TO_RUS;
//

CREATE OR REPLACE
FUNCTION SPLIT
(
    P_LIST VARCHAR2,
    P_DEL VARCHAR2 := ','
) RETURN SPLIT_TBL
IS
    CNT INTEGER DEFAULT 1;
    L_IDX    PLS_INTEGER;
    L_LIST    VARCHAR2(32767) := P_LIST;
    L_VALUE    VARCHAR2(32767);
    RES SPLIT_TBL := SPLIT_TBL();
BEGIN
    LOOP
        L_IDX := INSTR(L_LIST,P_DEL);
        IF L_IDX > 0 THEN
            RES.EXTEND;
            RES(CNT) := SUBSTR(L_LIST,1,L_IDX-1);
            CNT := CNT + 1;
            L_LIST := SUBSTR(L_LIST,L_IDX+LENGTH(P_DEL));

        ELSE
            RES.EXTEND;
            RES(CNT) := L_LIST;
            EXIT;
        END IF;
    END LOOP;
    RETURN RES;
END SPLIT;
//

CREATE OR REPLACE FUNCTION FIND_TOUR_INFO
RETURN LIST_TOUR_INFO PIPELINED IS
BEGIN
	FOR I IN (
		SELECT 
  			TOUR.NAME TOUR_NAME,
  			PLACE.NAME PLACE_NAME,
  			LISTAGG('[' || TRAVEL.NUMBER_CHILD || ';' || TRAVEL.NUMBER_ADULTS || ']', ',') 
    			WITHIN GROUP (ORDER BY TRAVEL.ID) TRAVEL_INFO,
  			LISTAGG('[' || FLIGHT.TYPE_TRANSPORT || ' from ' || FLIGHT.LEAVING_DATE || ' to ' || FLIGHT.ARRIVAL_DATE || ']', ',') 
    			WITHIN GROUP (ORDER BY FLIGHT.ID) FLIGHT_INFO,
  			LISTAGG('[' || HOTEL.RATING_HOTEL || ' from ' || HOTEL.ARRIVAL_DATE || ' to ' || HOTEL.LEAVING_DATE || ']', ',') 
    			WITHIN GROUP (ORDER BY HOTEL.ID) HOTEL_INFO
		FROM TOURS TOUR
		JOIN PLACES PLACE ON PLACE.ID = TOUR.ID_PLACE
		JOIN TRAVELS TRAVEL ON TOUR.ID = TRAVEL.ID_TOUR
		JOIN FLIGHTS FLIGHT ON TOUR.ID = FLIGHT.ID_TOUR
		JOIN HOTELS HOTEL ON TOUR.ID = HOTEL.ID_TOUR
		GROUP BY TOUR.NAME, PLACE.NAME) LOOP
		PIPE ROW (TOUR_INFO(I.TOUR_NAME, I.PLACE_NAME, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
	END LOOP;
END;
//

create or replace 
FUNCTION SEARCH_SIMPLE(STR IN VARCHAR2)
RETURN LIST_TOUR_INFO PIPELINED
IS
  S_IN VARCHAR2(32767) := '%' || TRIM(STR) || '%';
  S_RUS VARCHAR2(32767) := '%' || ENG_TO_RUS(TRIM(STR)) || '%';
  S_ENG VARCHAR2(32767) := '%' || RUS_TO_ENG(trim(STR)) || '%';
BEGIN
  IF LENGTH(TRIM(STR)) IS NULL THEN
    RETURN;
  END IF;
  FOR I IN (
      SELECT *
      FROM TABLE(FIND_TOUR_INFO()) 
      WHERE 
        UPPER(NAME) LIKE S_IN OR UPPER(NAME) LIKE S_RUS OR UPPER(NAME) LIKE S_ENG OR 
        UPPER(NAME_PLACE) LIKE S_IN OR UPPER(NAME_PLACE) LIKE S_RUS OR UPPER(NAME_PLACE) LIKE S_ENG OR
        UPPER(TRAVEL_INFO) LIKE S_IN OR UPPER(TRAVEL_INFO) LIKE S_RUS OR UPPER(TRAVEL_INFO) LIKE S_ENG OR 
        UPPER(FLIGHT_INFO) LIKE S_IN OR UPPER(FLIGHT_INFO) LIKE S_RUS OR UPPER(FLIGHT_INFO) LIKE S_ENG OR 
        UPPER(HOTEL_INFO) LIKE S_IN OR UPPER(HOTEL_INFO) LIKE S_RUS OR UPPER(HOTEL_INFO) LIKE S_ENG) LOOP
    PIPE ROW (TOUR_INFO(I.NAME, I.NAME_PLACE, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
  END LOOP;
END;
//

CREATE OR REPLACE FUNCTION L_MATCH(S_TBL SPLIT_TBL, S_IN VARCHAR2)
RETURN INTEGER IS 
  ITEM VARCHAR2(32767);
BEGIN
  FOR I IN S_TBL.FIRST .. S_TBL.LAST LOOP
    ITEM := S_TBL(I);
    IF (UTL_MATCH.EDIT_DISTANCE_SIMILARITY(S_IN, ITEM) >= 50) THEN
      RETURN 0;
    END IF;
  END LOOP;
  RETURN -1;
END;
//

CREATE OR REPLACE FUNCTION JW_MATCH(S_TBL SPLIT_TBL, S_IN VARCHAR2)
RETURN INTEGER IS 
  ITEM VARCHAR2(32767);
BEGIN
  FOR I IN S_TBL.FIRST .. S_TBL.LAST LOOP
    ITEM := S_TBL(I);
    IF (SYS.UTL_MATCH.JARO_WINKLER_SIMILARITY(S_IN, ITEM) >= 50) THEN
      RETURN 0;
    END IF;
  END LOOP;
  RETURN -1;
END;
//

CREATE OR REPLACE FUNCTION SEARCH_LEVENSTEIN(S_IN VARCHAR2)
RETURN LIST_TOUR_INFO PIPELINED
IS
  S_RUS VARCHAR2(32767) := ENG_TO_RUS(S_IN);
  S_ENG VARCHAR2(32767) := RUS_TO_ENG(S_IN);
  ST_IN SPLIT_TBL := SPLIT(S_IN, ' ');
  ST_RUS SPLIT_TBL := SPLIT(S_RUS, ' ');
  ST_ENG SPLIT_TBL := SPLIT(S_ENG, ' ');
BEGIN
  FOR I IN (
      SELECT *
      FROM TABLE(FIND_TOUR_INFO()) 
      WHERE 
        L_MATCH(ST_IN, NAME) = 0 OR 
        L_MATCH(ST_RUS, NAME) = 0 OR 
        L_MATCH(ST_ENG, NAME) = 0 OR
        L_MATCH(ST_IN, NAME_PLACE) = 0 OR
        L_MATCH(ST_RUS, NAME_PLACE) = 0 OR
        L_MATCH(ST_ENG, NAME_PLACE) = 0) LOOP
    PIPE ROW (TOUR_INFO(I.NAME, I.NAME_PLACE, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
  END LOOP;
END;
//

CREATE OR REPLACE FUNCTION SEARCH_JARO_WINKLER(S_IN VARCHAR2)
RETURN LIST_TOUR_INFO PIPELINED
IS
  S_RUS VARCHAR2(32767) := ENG_TO_RUS(S_IN);
  S_ENG VARCHAR2(32767) := RUS_TO_ENG(S_IN);
  ST_IN SPLIT_TBL := SPLIT(S_IN, ' ');
  ST_RUS SPLIT_TBL := SPLIT(S_RUS, ' ');
  ST_ENG SPLIT_TBL := SPLIT(S_ENG, ' ');
BEGIN
  FOR I IN (
      SELECT *
      FROM TABLE(FIND_TOUR_INFO()) 
      WHERE 
        JW_MATCH(ST_IN, NAME) = 0 OR 
        JW_MATCH(ST_RUS, NAME) = 0 OR 
        JW_MATCH(ST_ENG, NAME) = 0 OR
        JW_MATCH(ST_IN, NAME_PLACE) = 0 OR
        JW_MATCH(ST_RUS, NAME_PLACE) = 0 OR
        JW_MATCH(ST_ENG, NAME_PLACE) = 0) LOOP
    PIPE ROW (TOUR_INFO(I.NAME, I.NAME_PLACE, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
  END LOOP;
END;
//

CREATE OR REPLACE FUNCTION SEARCH(STR VARCHAR2, S_TYPE VARCHAR2)
RETURN LIST_TOUR_INFO PIPELINED
IS
  S_IN VARCHAR2(32767) := UPPER(STR);
BEGIN
  CASE S_TYPE
    WHEN 'SIMPLE' THEN 
      FOR I IN (SELECT * FROM TABLE (SEARCH_SIMPLE(S_IN))) LOOP
        PIPE ROW (TOUR_INFO(I.NAME, I.NAME_PLACE, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
      END LOOP;
    WHEN 'LEVENSTEIN' THEN
      FOR I IN (SELECT * FROM TABLE (SEARCH_LEVENSTEIN(S_IN))) LOOP
        PIPE ROW (TOUR_INFO(I.NAME, I.NAME_PLACE, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
      END LOOP;
    WHEN 'JARO_WINKLER' THEN
      FOR I IN (SELECT * FROM TABLE (SEARCH_JARO_WINKLER(S_IN))) LOOP
        PIPE ROW (TOUR_INFO(I.NAME, I.NAME_PLACE, I.TRAVEL_INFO, I.FLIGHT_INFO, I.HOTEL_INFO));
      END LOOP;
  END CASE;
END;
//